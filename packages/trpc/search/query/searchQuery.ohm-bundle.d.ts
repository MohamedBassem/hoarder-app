// AUTOGENERATED FILE
// This file was generated from searchQuery.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface SearchQueryActionDict<T> extends BaseActionDict<T> {
  Query?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  Exp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Or?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  And?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  AndExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Term?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Group?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  KeyVal?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  TagsIn?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: TerminalNode, arg3: NonterminalNode, arg4: TerminalNode) => T;
  TagsNotIn?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: TerminalNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: TerminalNode) => T;
  ListKeyVal?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  TextKeyVal?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  CreatedDateKeyVal?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  CreatedDateKeyValRelative?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: TerminalNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: TerminalNode, arg6: TerminalNode) => T;
  FavouriteKeyVal?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ArchivedKeyVal?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  BookmarkTypeKeyVal?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: TerminalNode, arg3: TerminalNode, arg4: TerminalNode) => T;
  Elements?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  boolean?: (this: NonterminalNode, arg0: TerminalNode) => T;
  string?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  date?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: IterationNode, arg6: TerminalNode, arg7: NonterminalNode, arg8: NonterminalNode, arg9: NonterminalNode, arg10: NonterminalNode, arg11: TerminalNode) => T;
  number?: (this: NonterminalNode, arg0: IterationNode) => T;
  anyChar?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  OrderBy?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  SortList?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  SortItem?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  SortKey?: (this: NonterminalNode, arg0: TerminalNode) => T;
  SortOrder?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface SearchQuerySemantics extends Semantics {
  addOperation<T>(name: string, actionDict: SearchQueryActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: SearchQueryActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: SearchQueryActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: SearchQueryActionDict<T>): this;
}

export interface SearchQueryGrammar extends Grammar {
  createSemantics(): SearchQuerySemantics;
  extendSemantics(superSemantics: SearchQuerySemantics): SearchQuerySemantics;
}

declare const grammar: SearchQueryGrammar;
export default grammar;

